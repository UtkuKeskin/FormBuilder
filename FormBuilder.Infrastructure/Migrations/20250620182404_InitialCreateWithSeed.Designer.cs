// <auto-generated />
using System;
using FormBuilder.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormBuilder.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250620182404_InitialCreateWithSeed")]
    partial class InitialCreateWithSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormBuilder.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("CustomCheckbox1Answer")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomCheckbox2Answer")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomCheckbox3Answer")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomCheckbox4Answer")
                        .HasColumnType("boolean");

                    b.Property<int?>("CustomInt1Answer")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomInt2Answer")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomInt3Answer")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomInt4Answer")
                        .HasColumnType("integer");

                    b.Property<string>("CustomString1Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomString2Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomString3Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomString4Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomText1Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomText2Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomText3Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomText4Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FilledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilledAt");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Like", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TemplateId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomCheckbox1Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomCheckbox1Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomCheckbox1ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomCheckbox1State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomCheckbox2Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomCheckbox2Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomCheckbox2ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomCheckbox2State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomCheckbox3Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomCheckbox3Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomCheckbox3ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomCheckbox3State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomCheckbox4Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomCheckbox4Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomCheckbox4ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomCheckbox4State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomInt1Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomInt1Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomInt1ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomInt1State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomInt2Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomInt2Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomInt2ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomInt2State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomInt3Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomInt3Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomInt3ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomInt3State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomInt4Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomInt4Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomInt4ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomInt4State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomString1Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomString1Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomString1ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomString1State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomString2Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomString2Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomString2ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomString2State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomString3Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomString3Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomString3ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomString3State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomString4Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomString4Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomString4ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomString4State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomText1Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomText1Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomText1ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomText1State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomText2Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomText2Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomText2ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomText2State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomText3Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomText3Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomText3ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomText3State")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomText4Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomText4Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomText4ShowInTable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomText4State")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.TemplateAccess", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("TemplateId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TemplateAccesses");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.TemplateTag", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("TemplateId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TemplateTags");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Quiz"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Poll"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Survey"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "INIT-CONCURRENCY",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@formbuilder.com",
                            EmailConfirmed = true,
                            IsAdmin = true,
                            Language = "en",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FORMBUILDER.COM",
                            NormalizedUserName = "ADMIN@FORMBUILDER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECsIkzteEzSY+3G/HqGkrqQEDRduM2/yKK082R9Tt5iW4tqG6ctSgJefy/ZY6Ytdmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "INIT-SECURITY-STAMP",
                            Theme = "light",
                            TwoFactorEnabled = false,
                            UserName = "admin@formbuilder.com",
                            Version = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-role-id",
                            ConcurrencyStamp = "admin-role-stamp",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "user-role-id",
                            ConcurrencyStamp = "user-role-stamp",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-user-id",
                            RoleId = "admin-role-id"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Comment", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.Template", "Template")
                        .WithMany("Comments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormBuilder.Core.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Form", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.Template", "Template")
                        .WithMany("Forms")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormBuilder.Core.Entities.User", "User")
                        .WithMany("Forms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Like", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.Template", "Template")
                        .WithMany("Likes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormBuilder.Core.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Template", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.Topic", "Topic")
                        .WithMany("Templates")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormBuilder.Core.Entities.User", "User")
                        .WithMany("Templates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.TemplateAccess", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.Template", "Template")
                        .WithMany("TemplateAccesses")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormBuilder.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.TemplateTag", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.Tag", "Tag")
                        .WithMany("TemplateTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormBuilder.Core.Entities.Template", "Template")
                        .WithMany("TemplateTags")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormBuilder.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FormBuilder.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Tag", b =>
                {
                    b.Navigation("TemplateTags");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Template", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Forms");

                    b.Navigation("Likes");

                    b.Navigation("TemplateAccesses");

                    b.Navigation("TemplateTags");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.Topic", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("FormBuilder.Core.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Forms");

                    b.Navigation("Likes");

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
